// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 3.17.3
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `samples.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:samples.Sample)
pub struct Sample {
    // message fields
    // @@protoc_insertion_point(field:samples.Sample.cfDNA_ng_mL_plasma)
    pub cfDNA_ng_mL_plasma: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:samples.Sample.Albumin)
    pub Albumin: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:samples.Sample.LDH)
    pub LDH: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:samples.Sample.ALP)
    pub ALP: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:samples.Sample.PSA)
    pub PSA: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:samples.Sample.liver_met)
    pub liver_met: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:samples.Sample.lung_met)
    pub lung_met: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:samples.Sample.ecog)
    pub ecog: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:samples.Sample.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Sample {
    fn default() -> &'a Sample {
        <Sample as ::protobuf::Message>::default_instance()
    }
}

impl Sample {
    pub fn new() -> Sample {
        ::std::default::Default::default()
    }

    // optional double cfDNA_ng_mL_plasma = 1;

    pub fn cfDNA_ng_mL_plasma(&self) -> f64 {
        self.cfDNA_ng_mL_plasma.unwrap_or(-1.0f64)
    }

    pub fn clear_cfDNA_ng_mL_plasma(&mut self) {
        self.cfDNA_ng_mL_plasma = ::std::option::Option::None;
    }

    pub fn has_cfDNA_ng_mL_plasma(&self) -> bool {
        self.cfDNA_ng_mL_plasma.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cfDNA_ng_mL_plasma(&mut self, v: f64) {
        self.cfDNA_ng_mL_plasma = ::std::option::Option::Some(v);
    }

    // optional double Albumin = 2;

    pub fn Albumin(&self) -> f64 {
        self.Albumin.unwrap_or(-1.0f64)
    }

    pub fn clear_Albumin(&mut self) {
        self.Albumin = ::std::option::Option::None;
    }

    pub fn has_Albumin(&self) -> bool {
        self.Albumin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Albumin(&mut self, v: f64) {
        self.Albumin = ::std::option::Option::Some(v);
    }

    // optional double LDH = 3;

    pub fn LDH(&self) -> f64 {
        self.LDH.unwrap_or(-1.0f64)
    }

    pub fn clear_LDH(&mut self) {
        self.LDH = ::std::option::Option::None;
    }

    pub fn has_LDH(&self) -> bool {
        self.LDH.is_some()
    }

    // Param is passed by value, moved
    pub fn set_LDH(&mut self, v: f64) {
        self.LDH = ::std::option::Option::Some(v);
    }

    // optional double ALP = 4;

    pub fn ALP(&self) -> f64 {
        self.ALP.unwrap_or(-1.0f64)
    }

    pub fn clear_ALP(&mut self) {
        self.ALP = ::std::option::Option::None;
    }

    pub fn has_ALP(&self) -> bool {
        self.ALP.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ALP(&mut self, v: f64) {
        self.ALP = ::std::option::Option::Some(v);
    }

    // optional double PSA = 5;

    pub fn PSA(&self) -> f64 {
        self.PSA.unwrap_or(-1.0f64)
    }

    pub fn clear_PSA(&mut self) {
        self.PSA = ::std::option::Option::None;
    }

    pub fn has_PSA(&self) -> bool {
        self.PSA.is_some()
    }

    // Param is passed by value, moved
    pub fn set_PSA(&mut self, v: f64) {
        self.PSA = ::std::option::Option::Some(v);
    }

    // optional int32 liver_met = 6;

    pub fn liver_met(&self) -> i32 {
        self.liver_met.unwrap_or(-1i32)
    }

    pub fn clear_liver_met(&mut self) {
        self.liver_met = ::std::option::Option::None;
    }

    pub fn has_liver_met(&self) -> bool {
        self.liver_met.is_some()
    }

    // Param is passed by value, moved
    pub fn set_liver_met(&mut self, v: i32) {
        self.liver_met = ::std::option::Option::Some(v);
    }

    // optional int32 lung_met = 7;

    pub fn lung_met(&self) -> i32 {
        self.lung_met.unwrap_or(-1i32)
    }

    pub fn clear_lung_met(&mut self) {
        self.lung_met = ::std::option::Option::None;
    }

    pub fn has_lung_met(&self) -> bool {
        self.lung_met.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lung_met(&mut self, v: i32) {
        self.lung_met = ::std::option::Option::Some(v);
    }

    // optional int32 ecog = 8;

    pub fn ecog(&self) -> i32 {
        self.ecog.unwrap_or(-1i32)
    }

    pub fn clear_ecog(&mut self) {
        self.ecog = ::std::option::Option::None;
    }

    pub fn has_ecog(&self) -> bool {
        self.ecog.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ecog(&mut self, v: i32) {
        self.ecog = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "cfDNA_ng_mL_plasma",
            |m: &Sample| { &m.cfDNA_ng_mL_plasma },
            |m: &mut Sample| { &mut m.cfDNA_ng_mL_plasma },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "Albumin",
            |m: &Sample| { &m.Albumin },
            |m: &mut Sample| { &mut m.Albumin },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "LDH",
            |m: &Sample| { &m.LDH },
            |m: &mut Sample| { &mut m.LDH },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ALP",
            |m: &Sample| { &m.ALP },
            |m: &mut Sample| { &mut m.ALP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "PSA",
            |m: &Sample| { &m.PSA },
            |m: &mut Sample| { &mut m.PSA },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "liver_met",
            |m: &Sample| { &m.liver_met },
            |m: &mut Sample| { &mut m.liver_met },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "lung_met",
            |m: &Sample| { &m.lung_met },
            |m: &mut Sample| { &mut m.lung_met },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ecog",
            |m: &Sample| { &m.ecog },
            |m: &mut Sample| { &mut m.ecog },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Sample>(
            "Sample",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Sample {
    const NAME: &'static str = "Sample";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.cfDNA_ng_mL_plasma = ::std::option::Option::Some(is.read_double()?);
                },
                17 => {
                    self.Albumin = ::std::option::Option::Some(is.read_double()?);
                },
                25 => {
                    self.LDH = ::std::option::Option::Some(is.read_double()?);
                },
                33 => {
                    self.ALP = ::std::option::Option::Some(is.read_double()?);
                },
                41 => {
                    self.PSA = ::std::option::Option::Some(is.read_double()?);
                },
                48 => {
                    self.liver_met = ::std::option::Option::Some(is.read_int32()?);
                },
                56 => {
                    self.lung_met = ::std::option::Option::Some(is.read_int32()?);
                },
                64 => {
                    self.ecog = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.cfDNA_ng_mL_plasma {
            my_size += 1 + 8;
        }
        if let Some(v) = self.Albumin {
            my_size += 1 + 8;
        }
        if let Some(v) = self.LDH {
            my_size += 1 + 8;
        }
        if let Some(v) = self.ALP {
            my_size += 1 + 8;
        }
        if let Some(v) = self.PSA {
            my_size += 1 + 8;
        }
        if let Some(v) = self.liver_met {
            my_size += ::protobuf::rt::int32_size(6, v);
        }
        if let Some(v) = self.lung_met {
            my_size += ::protobuf::rt::int32_size(7, v);
        }
        if let Some(v) = self.ecog {
            my_size += ::protobuf::rt::int32_size(8, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.cfDNA_ng_mL_plasma {
            os.write_double(1, v)?;
        }
        if let Some(v) = self.Albumin {
            os.write_double(2, v)?;
        }
        if let Some(v) = self.LDH {
            os.write_double(3, v)?;
        }
        if let Some(v) = self.ALP {
            os.write_double(4, v)?;
        }
        if let Some(v) = self.PSA {
            os.write_double(5, v)?;
        }
        if let Some(v) = self.liver_met {
            os.write_int32(6, v)?;
        }
        if let Some(v) = self.lung_met {
            os.write_int32(7, v)?;
        }
        if let Some(v) = self.ecog {
            os.write_int32(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Sample {
        Sample::new()
    }

    fn clear(&mut self) {
        self.cfDNA_ng_mL_plasma = ::std::option::Option::None;
        self.Albumin = ::std::option::Option::None;
        self.LDH = ::std::option::Option::None;
        self.ALP = ::std::option::Option::None;
        self.PSA = ::std::option::Option::None;
        self.liver_met = ::std::option::Option::None;
        self.lung_met = ::std::option::Option::None;
        self.ecog = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Sample {
        static instance: Sample = Sample {
            cfDNA_ng_mL_plasma: ::std::option::Option::None,
            Albumin: ::std::option::Option::None,
            LDH: ::std::option::Option::None,
            ALP: ::std::option::Option::None,
            PSA: ::std::option::Option::None,
            liver_met: ::std::option::Option::None,
            lung_met: ::std::option::Option::None,
            ecog: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Sample {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Sample").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Sample {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Sample {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:samples.Classification)
pub struct Classification {
    // message fields
    // @@protoc_insertion_point(field:samples.Classification.label)
    pub label: ::std::option::Option<bool>,
    // special fields
    // @@protoc_insertion_point(special_field:samples.Classification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Classification {
    fn default() -> &'a Classification {
        <Classification as ::protobuf::Message>::default_instance()
    }
}

impl Classification {
    pub fn new() -> Classification {
        ::std::default::Default::default()
    }

    // optional bool label = 1;

    pub fn label(&self) -> bool {
        self.label.unwrap_or(false)
    }

    pub fn clear_label(&mut self) {
        self.label = ::std::option::Option::None;
    }

    pub fn has_label(&self) -> bool {
        self.label.is_some()
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: bool) {
        self.label = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "label",
            |m: &Classification| { &m.label },
            |m: &mut Classification| { &mut m.label },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Classification>(
            "Classification",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Classification {
    const NAME: &'static str = "Classification";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.label = ::std::option::Option::Some(is.read_bool()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.label {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.label {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Classification {
        Classification::new()
    }

    fn clear(&mut self) {
        self.label = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Classification {
        static instance: Classification = Classification {
            label: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Classification {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Classification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Classification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Classification {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rsamples.proto\x12\x07samples\"\xf1\x01\n\x06Sample\x12/\n\x12cfDNA_n\
    g_mL_plasma\x18\x01\x20\x01(\x01:\x02-1R\x0fcfDNANgMLPlasma\x12\x1c\n\
    \x07Albumin\x18\x02\x20\x01(\x01:\x02-1R\x07Albumin\x12\x14\n\x03LDH\x18\
    \x03\x20\x01(\x01:\x02-1R\x03LDH\x12\x14\n\x03ALP\x18\x04\x20\x01(\x01:\
    \x02-1R\x03ALP\x12\x14\n\x03PSA\x18\x05\x20\x01(\x01:\x02-1R\x03PSA\x12\
    \x1f\n\tliver_met\x18\x06\x20\x01(\x05:\x02-1R\x08liverMet\x12\x1d\n\x08\
    lung_met\x18\x07\x20\x01(\x05:\x02-1R\x07lungMet\x12\x16\n\x04ecog\x18\
    \x08\x20\x01(\x05:\x02-1R\x04ecog\"&\n\x0eClassification\x12\x14\n\x05la\
    bel\x18\x01\x20\x01(\x08R\x05label\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Sample::generated_message_descriptor_data());
            messages.push(Classification::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
